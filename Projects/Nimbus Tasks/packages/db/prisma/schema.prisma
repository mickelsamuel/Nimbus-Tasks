// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication & Users
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  password      String?   // For email/password auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  memberships Membership[]
  assignedTasks Task[] @relation("TaskAssignee")
  createdTasks  Task[] @relation("TaskCreator")
  comments      Comment[]
  notifications Notification[]
  activityLogs  ActivityLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Multi-tenancy
model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  projects    Project[]
  tags        Tag[]

  @@map("organizations")
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  id   String         @id @default(cuid())
  role MembershipRole @default(MEMBER)

  // Foreign keys
  userId         String
  organizationId String

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organizationId])
  @@map("memberships")
}

// Projects & Tasks
model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String? @default("#3B82F6")

  // Multi-tenancy
  organizationId String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueAt       DateTime?

  // Foreign keys
  projectId  String
  assigneeId String?
  creatorId  String

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User         @relation("TaskCreator", fields: [creatorId], references: [id])
  comments    Comment[]
  tags        Tag[]        @relation("TaskTags")
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

model Comment {
  id      String @id @default(cuid())
  content String @db.Text

  // Foreign keys
  taskId String
  userId String

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Tag {
  id    String @id @default(cuid())
  name  String
  color String @default("#10B981")

  // Multi-tenancy
  organizationId String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        Task[]       @relation("TaskTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, organizationId])
  @@map("tags")
}

model Attachment {
  id       String @id @default(cuid())
  filename String
  fileUrl  String
  fileSize Int
  mimeType String

  // Foreign keys
  taskId String

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attachments")
}

// Activity & Notifications
enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_ASSIGNED
  COMMENT_ADDED
  PROJECT_CREATED
  PROJECT_UPDATED
  MEMBER_ADDED
  MEMBER_REMOVED
}

model ActivityLog {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?

  // Foreign keys
  userId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("activity_logs")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  COMMENT_MENTION
  PROJECT_INVITE
}

model Notification {
  id       String           @id @default(cuid())
  type     NotificationType
  title    String
  message  String
  read     Boolean          @default(false)
  metadata Json?

  // Foreign keys
  userId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}